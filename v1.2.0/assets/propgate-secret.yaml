# Assumption: Secret named regcred in the default namespace is present in the management
# cluster. This Secret contains credentials to authenticate with a container registry
# to pull a private image.
#
# Sveltos will watch for creation/deletion of namespaces with label "imagepullsecret: required"
# in all production clusters.
# Sveltos will create regcred Secret in any such namespace
apiVersion: v1
kind: ConfigMap
metadata:
  name: namespaces-requiring-imagepullsecret
  namespace: default
data:
  namespaces: |
    {{- range $v := .MatchingResources }}
      {{ $v.Name }}: "ok"
    {{- end }}
---
apiVersion: lib.projectsveltos.io/v1beta1
kind: EventSource
metadata:
  name: new-namespace
spec:
  collectResources: false
  resourceSelectors:
  - group: ""
    version: "v1"
    kind: "Namespace"
    labelFilters:
    - key: imagepullsecret
      operation: Equal
      value: required
---
apiVersion: lib.projectsveltos.io/v1beta1
kind: EventTrigger
metadata:
  name: deploy-imagepullsecret
spec:
  sourceClusterSelector:
    matchLabels:
      env: production
  eventSourceName: new-namespace
  configMapGenerator:
  - name: namespaces-requiring-imagepullsecret
    namespace: default
    nameFormat: "{{ .Cluster.metadata.name }}-imagepullsecret"
  oneForEvent: false
  templateResourceRefs:
  - resource: # This refers to the resource that Sveltos dynamically generates using ConfigMapGenerator.
      apiVersion: v1
      kind: ConfigMap
      name: "{{ .Cluster.metadata.name }}-imagepullsecret"
      namespace: projectsveltos
    identifier: Namespaces
  - resource: # This is the ConfigMap containing the credentials to authenticate with private registry
      apiVersion: v1
      kind: Secret
      name: regcred
      namespace: default
    identifier: ImagePullSecret
  policyRefs:
  - name: deploy-imagepullsecret
    namespace: default
    kind: Secret
---
apiVersion: v1
kind: Secret
metadata:
  name: deploy-imagepullsecret
  namespace: default
  annotations:
    projectsveltos.io/instantiate: ok
type: addons.projectsveltos.io/cluster-profile
stringData:
  content: |
    {{ $namespaces := ( ( index (getResource "Namespaces").data "namespaces" ) | fromYaml ) }}
    {{- range $key, $value := $namespaces }}
        apiVersion: v1
        kind: Secret
        metadata:
          namespace: {{ $key }}
          name: {{ (getResource "ImagePullSecret").metadata.name }}
        type: kubernetes.io/dockerconfigjson
        data:
          {{- range $secretKey, $secretValue := (getResource "ImagePullSecret").data }}
            {{ $secretKey }} : {{ $secretValue }}
          {{- end }}
    ---
    {{- end }}
